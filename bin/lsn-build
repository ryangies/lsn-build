#!/usr/bin/perl -w
package Local::App::Build;
use lib qq(src/lib/perl);
use strict;
use Perl::Module;
use Error::Programatic;
use Data::OrderedHash;
use Data::Hub;
use Data::Hub::Util qw(:all);
use Parse::Template::Standard;
use base 'App::Console::CommandScript';
use Cwd qw(cwd);

our %USAGE = ();

# ------------------------------------------------------------------------------
# new - Constructor
# new $cwd, $app_path
# where:
#   $cwd_path     The caller's working directory (exit directory)
#   $app_path     The directory of this app (where builders are found)
# ------------------------------------------------------------------------------

sub new {
  my $self = shift->SUPER::new();
  $self->{'cmd_parser'} = Parse::Template::Standard->new(
    -begin => '${',
    -end => '}'
  );
  $self->{'cwd_path'} = shift;
  $self->{'app_path'} = shift;
  $self->{'cwd'} = Data::Hub->new($self->{'cwd_path'});
  $self->{'app'} = Data::Hub->new($self->{'app_path'});
  $self;
}

# ------------------------------------------------------------------------------

$USAGE{'test'} = {
  summary => 'Run tests',
  params => Data::OrderedHash->new(
  ),
};

sub test {
  my $self = shift;
  my $opts = my_opts(\@_);
  foreach my $worker ($self->_get_workers(@_, -opts => $opts)) {
    my ($spec, $pm, $builder) = @$worker;
    $self->_invoke('compile', $worker);
    if (my $test_script = $$builder{test_script}) {
      $self->printf("%_bs\n", 'Testing: ' . $$builder{cname});
      $self->print(`$test_script`);
    } else {
      $self->warn("No test script for: $$builder{cname}\n");
    }
  }
}

# ------------------------------------------------------------------------------

$USAGE{'compile'} = {
  summary => 'Compile the project',
  params => Data::OrderedHash->new(
    '-bump' => 'Bump the revision number',
    '-force' => 'Remove and recompile if the output directory exists',
    '-out' => 'Alternate output directory',
  ),
};

sub compile {
  my $self = shift;
  my $opts = my_opts(\@_);
  foreach my $worker ($self->_get_workers(@_, -opts => $opts)) {
    $self->_compile($worker, -opts => $opts);
  }
}

sub _compile {
  my $self = shift;
  my $opts = my_opts(\@_);
  my $worker = shift;
  my ($spec, $pm, $builder) = @$worker;
  my $out_path = $builder->{'out_path'};

  if (($$builder{'is_new_build'}) || $$opts{'force'}) {

    # Re-build as needed
    dir_remove_contents $out_path;

    # Run pre-compile commands
    if (my $pre_compile = $$spec{'pre_compile'}) {
      $self->err_printf("%_^s\n", 'Running pre-compile commands');
      $self->_run_commands($builder, $opts, @$pre_compile);
    }

    # File-system has changed
    $$builder{'hub'}->expire;

    # Compile
    $self->_shout("Compiling %s...", $$builder{'cname'});
    $self->_invoke('compile', $worker);

    # File-system has changed
    $$builder{'out_hub'}->expire;

    # Populate templated files
    if (my $parse_files = $$spec{'parse_files'}) {
      my %vars = map {$_ => $builder->{$_}}
        qw(cname name version spec proj_path out_path);
      foreach my $subpath (@$parse_files) {
        my $path = path_normalize("$out_path/$subpath");
        $self->_file_populate($builder, $path, \%vars);
      }
    }

    # Run post-compile commands
    if (my $post_compile = $$spec{'post_compile'}) {
      $self->err_printf("%_^s\n", 'Running post-compile commands');
      $self->_run_commands($builder, $opts, @$post_compile);
    }

  }

  if (-d $out_path) {
    printf "%s\n", $out_path;
  }
}

# ------------------------------------------------------------------------------

$USAGE{'dist'} = {
  summary => 'Build distribution packages',
  params => Data::OrderedHash->new(
    '-bump' => 'Bump the revision number',
    '-force' => 'Remove and recompile if the output directory exists',
    '-out' => 'Alternate output directory',
  ),
};

sub dist {
  my $self = shift;
  my $opts = my_opts(\@_);
  foreach my $worker ($self->_get_workers(@_, -opts => $opts)) {
    my ($spec, $pm, $builder) = @$worker;
    $self->_compile($worker, -opts => $opts);
    $self->_shout("Packaging: %s...\n", $$builder{'cname'});
    $self->_invoke('dist', $worker);
    my $dist_fn = $builder->{'dist_fn'};
    if (defined $dist_fn && -f $dist_fn) {
      printf "%s\n", $builder->{'dist_fn'};
    } else {
      $self->error("Builder did not create a distribution file");
    }
  }
}

# ------------------------------------------------------------------------------

$USAGE{'upload'} = {
  summary => 'Upload distribution files',
  params => Data::OrderedHash->new(
    '-out' => 'Alternate output directory',
  ),
};

sub upload {
  my $self = shift;
  my $opts = my_opts(\@_);
  foreach my $worker ($self->_get_workers(@_, -opts => $opts)) {
    my ($spec, $pm, $builder) = @$worker;
    $self->_shout("Uploading: %s...\n", $$builder{'cname'});
    $self->_invoke('upload', $worker);
    # Run post-upload commands
    if (my $post_upload = $$spec{'post_upload'}) {
      $self->err_printf("%_^s\n", 'Running post-upload commands');
      $self->_run_commands($builder, $opts, @$post_upload);
    }
  }
}

# ------------------------------------------------------------------------------
# _get_workers - Create builder objects for each build spec
# _get_workers
# _get_workers -bump
# ------------------------------------------------------------------------------

sub _get_workers {
  my $self = shift;
  my $opts = my_opts(\@_, {'bump' => 0, 'out' => undef});
  my $bump = [0, 0, $$opts{'bump'}];
  my @workers = ();
  foreach my $file ($self->_get_specs(@_)) {
    my $proj_path = path_parent($file->get_path);
    my $name = $file->{'name'} || path_basename($proj_path);
    my $type = $file->{'builder'} or die "Build spec has no builder: $name";
    my $builder_dir = $$self{'app'}->get('/builders/' . $type);
    my $common_dir = $$self{'app'}->get('/common');
    my $pm = $builder_dir->{'module.pm'} or die "Builder failed to load: $name ($type)";
    my $version = $self->_get_version($file, $bump);
    my $out_base = $$opts{'out'}
      ? path_join($$self{'cwd_path'}, $$opts{'out'})
      : path_join($proj_path, 'out');
    my $out_dirname = sprintf '%s-%s', $name, $version;
    my $out_path = sprintf '%s/%s', $out_base, $out_dirname;
    my $out_exists = -d $out_path;
    dir_create($out_path) unless $out_exists;
    my $out_hub = Data::Hub->new($out_path);
    my $hub = Data::Hub->new($proj_path);
    my $builder = $pm->{'new'}(
      cname => $out_dirname, # canonical name
      name => $name,
      version => $version,
      spec => $file,
      hub => $hub,
      proj_path => $proj_path,
      common_dir => $common_dir,
      builder_dir => $builder_dir,
      builder_path => $builder_dir->get_path,
      out_base_path => $out_base,
      is_new_build => !$out_exists,
      out_path => $out_path,
      out_hub => $out_hub,
      dist_fn => undef, # builder should set this when done
      parser => Parse::Template::Standard->new($out_hub),
    );
    push @workers, [$file, $pm, $builder];
  }
  @workers;
}

# ------------------------------------------------------------------------------
# _get_specs - Return nodes for the specified build-spec files
# _get_specs
# _get_specs $addr
# _get_specs @addrs
# ------------------------------------------------------------------------------

sub _get_specs {
  my $self = shift;
  my @specs = ();
  unshift @_, 'project.hf' unless @_;
  for (@_) {
    my $path = path_is_absolute($_) ? $_ : path_join($$self{'cwd_path'}, $_);
    $self->quit("Cannot find build-spec: $path") unless -f $path;
    push @specs, FS('Node')->new($path);
  }
  @specs;
}

# ------------------------------------------------------------------------------
# _get_version - Parse the version-number array into a string
# _get_version $file
# _get_version $file, \@bump
# ------------------------------------------------------------------------------

sub _get_version {
  my $self = shift;
  my $file = shift;
  my $bump = shift;
  my $version = $file->{version} or return '0';
  if (isa($version, 'ARRAY')) {
    # Normal version array.  Three parts: major, minor, and revision
    if ($bump) {
      my $sum = 0;
      $sum += $_ for (@$bump);
      if ($sum > 0) {
        $$version[0] += $$bump[0];
        $$version[1] += $$bump[1];
        $$version[2] += $$bump[2];
        $file->save();
      }
    }
    return sprintf '%02d.%02d%03d', @$version;
  } else {
    # Scalar version number (like "b12")
    if ($bump) {
      my $sum = 0;
      $sum += $_ for (@$bump);
      if ($sum > 0) {
        $version =~ s/([\d]+)/\%s/ or die "Cannot increment version: $version";
        my ($num) = $1;
        my $width = length($num);
        $num = sprintf '%0' . $width . 'd', $num + $sum;
        $version = sprintf $version, $num;
        $file->set('version', $version);
        $file->save();
      }
    }
    return $version;
  }
}

# ------------------------------------------------------------------------------
# _invoke - Invoke a builder's method
# _invoke $worker
# ------------------------------------------------------------------------------

sub _invoke {
  my $self = shift;
  my $sub_name = shift;
  my $worker = shift;
  my ($spec, $pm, $builder) = @$worker;
  # We are calling $sub_name of the $builder class in such a way that the 
  # address './' will return the builder's directory.
  die "Method '$sub_name' not implemented!" unless $pm->{$sub_name};
  $self->_chdir($$builder{'proj_path'});
  $pm->{$sub_name}($builder);
  $self->_chdir($$self{'cwd_path'});
}

1;

# ------------------------------------------------------------------------------
# _file_populate - Parse the given file and write output back to the file
# _file_populate $path
# ------------------------------------------------------------------------------

sub _file_populate {
  my $self = shift;
  my $builder = shift;
  my $path = shift or return;
  my $addr = $$builder{'out_hub'}->path_to_addr($path) or die "Cannot find: $path\n";
  warn "Parsing: $path\n";
	my $out = $$builder{'parser'}->compile($addr, @_);
  die unless $$out;
  chomp $$out; $$out .= "\n";
  file_write($path, $out);
}

# ------------------------------------------------------------------------------
# _run_commands - 
# ------------------------------------------------------------------------------

sub _run_commands {
  my $self = shift;
  my $builder = shift;
  my $opts = shift;
  my $opts_str = join ' ', map {sprintf('-%s=%s', $_, $$opts{$_})} keys %$opts;
  $self->_chdir($$builder{'proj_path'});
  foreach my $cmd (@_) {
    $cmd = $self->_expand_cmd($cmd, $$builder{'spec'}, {'options' => $opts_str});
    $self->printf("%_bs\n", "Command: $cmd");
    my $rc = system split(/ /, $cmd);
    $self->quit("Command failed [$rc], aborting...") unless $rc == 0;
  }
  $self->_chdir($$self{'cwd_path'});
}

# ------------------------------------------------------------------------------
# _expand_cmd - Expand environment variables in command-line commands
# ------------------------------------------------------------------------------

sub _expand_cmd {
  my $self = shift;
  my $cmd = shift;
  my $result = $$self{'cmd_parser'}->compile_text(\$cmd, \%ENV, @_);
  $$result;
}

sub _chdir {
  my $self = shift;
  my $dir = shift;
  #$self->err_printf("%_*s\n", "CHDIR $dir");
  chdir $dir or die "$!: $dir";
  
}

sub _shout {
  my $self = shift;
  my $msg = shift;
  $self->err_printf("%_*s\n", sprintf($msg, @_));
}

# ==============================================================================

package main;
use FindBin;
use Cwd qw(cwd);
use Data::Hub::Util qw(:all);

my $cwd = cwd();
my $app_path = path_parent($FindBin::Bin);
Local::App::Build->new($cwd, $app_path)->exec(@ARGV);
